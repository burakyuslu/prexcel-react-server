{"version":3,"sources":["pages/ScreenIds.js","logo.svg","pages/images/prexcel_logo.png","pages/DialogBox.js","pages/Login.js","pages/MainMenu.js","pages/MyPresentations.js","pages/PresentationDetails.js","pages/TranscriptDetails.js","pages/SignUp.js","pages/LivePresentation.js","pages/ChatBot.js","pages/UserAccountDetails.js","pages/NewPresentation.js","pages/UploadRecordingScreen.js","pages/ProgressTracking.js","pages/CheckCamera.js","pages/UploadPresentationLoading.js","pages/TutorialApp.js","pages/TutorialPresentation.js","App.js","reportWebVitals.js","index.js"],"names":["ScreenIds","LOGIN_SCREEN_ID","SIGNUP_SCREEN_ID","FORGOT_PASSWORD_SCREEN_ID","MAIN_MENU_SCREEN_ID","USER_ACC_DETAILS_SCREEN_ID","MY_PRESENTATIONS_SCREEN_ID","PRESENTATION_DETAILS_SCREEN_ID","TRANSCRIPT_DETAILS_SCREEN_ID","UPLOAD_PRESENTATION_SCREEN_ID","LIVE_PRESENTATION_FEEDBACK_SCREEN_ID","LIVE_FEEDBACK_SCREEN_ID","NEW_PRESENTATION_ID","CHECK_CAMERA","LOADING_SCREEN","TUTORIAL_PRESENTATION_SCREEN_ID","TUTORIAL_APP_SCREEN_ID","CHAT_BOT_SCREEN_ID","PROGRESS_TRACKING_SCREEN_ID","DialogBox","props","Dialog","open","onClose","DialogTitle","sx","backgroundColor","id","dialogTitle","DialogContent","DialogContentText","dialogContent","DialogActions","Button","onClick","autoFocus","Login","useState","dialogOpen","setDialogOpen","count","setCount","useEffect","console","log","onUserIdHandler","onLoginHandler","Grid","container","spacing","item","xs","src","pLogo","style","marginTop","width","height","borderRadius","Paper","marginBottom","flexDirection","alignItems","justifyContent","elevation","paddingTop","marginRight","marginLeft","TextField","border","label","variant","type","paddingBottom","login_username","document","getElementById","login_password","userData","fetch","method","headers","body","JSON","stringify","then","resp","json","data","catch","error","getUser","value","login_error_message","MainMenu","fontStyle","color","onMainMenuHandler","columns","field","headerName","editable","MyPresentations","fetchPresentations","rows","setRows","selectedRows","setSelectedRows","getPresentations","userID","arr2d","fixedRows","i","length","newObj","name","transcript","user_id","wpm","duration","filler_ratio","word_count","gap_ratio","fd_score","grade","dragged_ratio","repeated_ratio","p_date","push","fixData","currentUserID","pageSize","rowsPerPageOptions","checkboxSelection","disableSelectionOnClick","onSelectionModelChange","ids","selectedIDs","Set","filter","row","has","disabled","onMyPresentationsHandler","onPresentationSelection","PresentationDetails","goBackToMyPresentations","onPresentationDetails","a","selectedPresentations","success","Card","Math","round","toFixed","textAlign","align","textIndent","transcriptTokens","split","processTranscriptArrTemp","tagStack","token","pop","word","processTranscriptHandler","TranscriptDetails","padding","processedTranscriptArr","map","typeOfWord","margin","onTranscriptDetails","SignUp","setDialogContent","setDialogTitle","required","username","email","password","password2","signUpSuccessful","newUser","newData","onSignUpHandler","interval1","interval2","interval3","interval4","LivePresentation","fd_flag","setFdFlag","decibel_flag","setDecibel","setTranscript","recommendation1","setRecommendation1","recommendation2","setRecommendation2","recommendation3","setRecommendation3","recommendation4","setRecommendation4","recommendation5","setRecommendation5","endButtonDisabled","setEndButtonDisabled","startButtonDisabled","setStartButtonDisabled","flagGap","setFlagGap","presentationData","newPresentationName","paddingLeft","DecibelValue","setInterval","clearInterval","onLivePresentationHandler","ChatBotScreen","questions","position","question","answer","initializeChatBotMessage","msgObj","messageList","setMessageList","newQuestionNumber","setNewQuestionNumber","setValue","chatbot_end_ref","useRef","ChatItem","messageStyle","float","background","overflowWrap","wordWrap","text","str","TextList","key0","random","toString","substr","List","message","maxHeight","overflow","className","ref","onSubmit","event","preventDefault","newQuestionNumberText","answ","isNaN","newAnswer","questionList","newList","current","scrollIntoView","behavior","size","endIcon","onChange","target","fontSize","onChatBot","UserAccountDetails","setID","setUsername","presentationCount","setPresentationCount","setEmail","getUserInfo","deleteUser","onUserAccountDetailsHandler","NewPresentation","onNewPresentationName","onNewPresentationHandler","UploadRecordingScreen","flagPresentationSelector","setFlagPresentationSelector","setPresentationProcessed","setFlagProcessingPresentation","path","onFileSelected","file","files","onInput","onUploadPresentationHandler","uploadHandler","processPresentation","ProgressTracking","formData","objArr","dataType","obj","returnDataObj","Chart","register","registerables","state","labels","datasets","fill","lineTension","borderColor","borderWidth","options","title","display","legend","onProgressTracking","pName","pDate","Date","String","toDateString","CheckCamera","playing","setPlaying","muted","autoPlay","getElementsByClassName","srcObject","getTracks","stop","navigator","getUserMedia","video","stream","err","onCheckCameraHandler","UploadPresentationLoading","goToMainMenu","onPresentationLoadingHandler","processingNotDone","processingFinished","uploadDone","TutorialApp","onTutorialAppHandler","TutorialPresentation","onTutorialPresentationHandler","App","setTranscriptArr","currentScreen","setCurrentScreen","setCurrentUserID","setSelectedPresentations","setNewPresentationName","setUploadDone","changeViewHandler","newScreenId","userIdHandler","newUserId","presentationSelectionHandler","presentations","newPresentationNameHandler","minHeight","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.fb0e7b33.chunk.js","sourcesContent":["\nconst ScreenIds = {\n\n   // login-signup\n   LOGIN_SCREEN_ID: 1,\n   SIGNUP_SCREEN_ID: 2,\n   FORGOT_PASSWORD_SCREEN_ID: 3,\n\n   // main menu's & acc details\n   MAIN_MENU_SCREEN_ID: 4,\n   USER_ACC_DETAILS_SCREEN_ID: 5,\n\n   // presentation screens\n   MY_PRESENTATIONS_SCREEN_ID: 6,\n   PRESENTATION_DETAILS_SCREEN_ID: 7,\n   TRANSCRIPT_DETAILS_SCREEN_ID: 8,\n   UPLOAD_PRESENTATION_SCREEN_ID: 9,\n   LIVE_PRESENTATION_FEEDBACK_SCREEN_ID: 10,\n   LIVE_FEEDBACK_SCREEN_ID: 11,\n   NEW_PRESENTATION_ID: 22,\n   CHECK_CAMERA: 23,\n   LOADING_SCREEN: 24,\n   // LIVE_PRESENTATION_ID: 25,\n\n\n   // tutorials\n   TUTORIAL_PRESENTATION_SCREEN_ID: 12,\n   TUTORIAL_APP_SCREEN_ID: 13,\n   CHAT_BOT_SCREEN_ID: 14,\n\n   PROGRESS_TRACKING_SCREEN_ID: 15,\n\n\n}\n\n\nexport default ScreenIds","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export default __webpack_public_path__ + \"static/media/prexcel_logo.a8a53865.png\";","import {Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle} from \"@mui/material\";\nimport React from \"react\";\n\n\nexport default function DialogBox(props) {\n\n   return (\n\n      <div>\n         <Dialog open={props.open} onClose={props.onClose}>\n            <DialogTitle sx={{backgroundColor: 'whitesmoke'}} id=\"alert-dialog-title\">\n               {props.dialogTitle}\n            </DialogTitle>\n            <DialogContent sx={{backgroundColor: 'whitesmoke'}}>\n               <DialogContentText id=\"alert-dialog-description\">\n                  {props.dialogContent}\n               </DialogContentText>\n            </DialogContent>\n            <DialogActions sx={{backgroundColor: 'whitesmoke'}}>\n               <Button  onClick={props.onClose} autoFocus>\n                  Go Back\n               </Button>\n            </DialogActions>\n         </Dialog>\n      </div>\n\n   );\n}","import React, {useState, useEffect, useRef} from \"react\";\nimport {render} from \"react-dom\";\nimport * as ReactDOM from \"react-dom\";\nimport ScreenIds from \"./ScreenIds\";\n\nimport pLogo from \"./images/prexcel_logo.png\";\n\n// material ui components\nimport {Button, Grid, Paper, TextField} from \"@mui/material\";\nimport DialogBox from \"./DialogBox\";\n\nconst Login = (props) => {\n\n   const [dialogOpen, setDialogOpen] = useState(false);\n   const handleClose = () => {\n      setDialogOpen(false);\n   };\n\n   const [count, setCount] = useState(0);\n   useEffect(() => {\n      // if successful change to main menu\n      if (count != \"-1\" && count != \"0\") {\n         console.log(count);\n         props.onUserIdHandler(count);\n         console.log(\"User ID : \" + count + \" is posted to App.js\");\n         props.onLoginHandler(ScreenIds.MAIN_MENU_SCREEN_ID);\n      }\n      // otherwise reshow the login screen\n      else {\n         props.onLoginHandler(ScreenIds.LOGIN_SCREEN_ID);\n      }\n   });\n\n   function AttemptLogin() {\n      let login_username = document.getElementById('login_username')\n      let login_password = document.getElementById('login_password')\n      const getUser = (userData) => {\n         let success = true;\n         fetch('http://localhost:5000/login', {\n            method: 'POST',\n            headers: {\n               'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(userData)\n         })\n            .then((resp) => {\n               return resp.json()\n            })\n            .then((data) => {\n               console.log(data);\n               setCount(data);\n               if (data === -1) {\n                  console.log(\"dialog box opening\");\n                  setDialogOpen(true);\n               }\n            })\n            .catch(error => console.log(error))\n\n         return success;\n      };\n\n      const userData = {\n         \"username\": login_username.value,\n         \"password\": login_password.value\n      };\n\n      getUser(userData);\n\n      login_username.value = \"\";\n      login_password.value = \"\";\n   }\n\n   function goToSignUp() {\n\n      props.onLoginHandler(ScreenIds.SIGNUP_SCREEN_ID)\n   }\n\n   // <h1 style={{color:'whitesmoke', flexDirection: 'row', alignItems: 'center', justifyContent: 'center'}}>Welcome To Prexcel </h1>\n\n   return (\n      <Grid container spacing={2}>\n\n         <Grid item xs={12}>\n\n         </Grid>\n\n         <Grid item xs={4}/>\n         <Grid item xs={4}>\n            <img src={pLogo} style={{marginTop:\"7%\", width: 400, height: 400,borderRadius: 400/ 2}} />\n\n\n            <Paper style={{\n               backgroundColor: 'whitesmoke',\n               marginTop: '10%',\n               marginBottom: '5%',\n               flexDirection: 'row',\n               alignItems: 'center',\n               justifyContent: 'center'\n            }} elevation={8}>\n\n               <Grid style={{paddingTop: '5%'}} item xs={12}>\n                  Please log-in or create an account to continue:\n               </Grid>\n\n               <Grid style={{marginTop: '5%',}} item xs={12}>\n                  <Paper sx={{backgroundColor: 'white', marginRight: '33%', marginLeft: '32.1%'}} elevation={4}>\n                     <TextField data-testid=\"login_username_field\" sx={{width:'99%', border: \"2px solid #2c778f\", borderRadius:'5px',}} id=\"login_username\" label=\"Username\"\n                                variant=\"filled\"/>\n                  </Paper>\n               </Grid>\n\n               <Grid style={{marginTop: '5%'}} item xs={12}>\n                  <Paper sx={{backgroundColor: 'white', marginRight: '33%', marginLeft: '32.1%'}} elevation={4}>\n                     <TextField data-testid=\"login_password_field\" sx={{width:'99%', border: \"2px solid #2c778f\", borderRadius:'5px',}} id=\"login_password\" label=\"Password\"\n                                variant=\"filled\" type=\"password\"/>\n                  </Paper>\n               </Grid>\n\n               <Grid style={{marginTop: '5%', paddingBottom: '5%'}} item xs={12}>\n                  <Button data-testid=\"login_button_id\" style={{marginRight: '5%'}} variant=\"contained\" onClick={AttemptLogin}>Log-In</Button>\n                  <Button data-testid=\"sign_up_button_id\" variant=\"contained\" onClick={goToSignUp}>Sign-Up</Button>\n                  <DialogBox login_error_message=\"login_error_message_id\" open={dialogOpen} onClose={handleClose}\n                             dialogContent={\"Please re-enter your login credentials.\"}\n                             dialogTitle={\"Incorrect password or username!\"}/>\n               </Grid>\n\n            </Paper>\n         </Grid>\n         <Grid item xs={4}/>\n\n\n      </Grid>\n   );\n};\n\nexport default Login;","import React, { useState, useEffect, useRef } from \"react\";\nimport {render} from \"react-dom\";\nimport * as ReactDOM from \"react-dom\";\nimport ScreenIds from \"./ScreenIds\";\n\nimport pLogo from \"./images/prexcel_logo.png\";\n\nimport {Button, Grid, Paper, TextField} from \"@mui/material\";\n\nconst MainMenu = (props) => {\n\n  function logOut() {\n     // todo discard authorization token\n\n     props.onMainMenuHandler(ScreenIds.LOGIN_SCREEN_ID);\n  }\n\n   function goToChatBot() {\n      props.onMainMenuHandler(ScreenIds.CHAT_BOT_SCREEN_ID);\n   }\n\n  function goToMyPresentations() {\n    props.onMainMenuHandler(ScreenIds.MY_PRESENTATIONS_SCREEN_ID);\n  }\n\n   function goToUserAccountDetails() {\n      props.onMainMenuHandler(ScreenIds.USER_ACC_DETAILS_SCREEN_ID);\n   }\n\n  function goToLivePresentation() {\n      props.onMainMenuHandler(ScreenIds.LIVE_PRESENTATION_FEEDBACK_SCREEN_ID);\n  }\n\n   function goToNewPresentation() {\n      props.onMainMenuHandler(ScreenIds.NEW_PRESENTATION_ID);\n   }\n\n   function doNothing() {\n     props.onMainMenuHandler(ScreenIds.MAIN_MENU_SCREEN_ID);\n   }\n\n   function goToTutorialApp() {\n      props.onMainMenuHandler(ScreenIds.TUTORIAL_APP_SCREEN_ID);\n   }\n\n   function goToTutorialPresentation() {\n      props.onMainMenuHandler(ScreenIds.TUTORIAL_PRESENTATION_SCREEN_ID);\n   }\n\n   //                <h1 data-testid=\"prexcel_title_id\" style={{color:'whitesmoke', flexDirection:'row', alignItems:'center', justifyContent:'center'}} >\n   //                   Prexcel\n   //                </h1><br/>\n   return (\n      <div>\n         <Grid container spacing={2}>\n            <Grid item xs={12} >\n\n               <img src={pLogo} style={{marginTop:\"2%\", width: 250, height: 250,borderRadius: 400/ 2}} />\n\n               <h1 data-testid=\"prexcel_title_id\" style={{fontStyle: 'italic', color:'whitesmoke', flexDirection:'row', alignItems:'center', justifyContent:'center'}} >The Multifunctional Presentation Assistant</h1>\n            </Grid>\n            <Grid item xs={4}/>\n            <Grid item xs={4}>\n               <Paper style={{backgroundColor:'whitesmoke', marginTop: '2.5%', marginBottom:'2.5%', flexDirection:'row', alignItems:'center', justifyContent:'center'}} elevation={8}>\n                  <Button style={{ marginTop: '5%', marginBottom: '5%'}} variant=\"contained\" onClick={goToNewPresentation}>Start a Presentation</Button> <br/>\n                  <Button style={{ marginBottom: '5%'}} variant=\"contained\" onClick={goToMyPresentations}>My Presentations</Button> <br/>\n                  <Button style={{ marginBottom: '5%'}} variant=\"contained\" onClick={goToTutorialApp}>Tutorial on Prexcel</Button> <br/>\n                  <Button style={{ marginBottom: '5%'}} variant=\"contained\" onClick={goToTutorialPresentation}>Tutorial on Presentations</Button> <br/>\n                  <Button style={{ marginBottom: '5%'}} variant=\"contained\" onClick={goToUserAccountDetails}>User-Account-Details</Button> <br/>\n                  <Button style={{ marginBottom: '5%'}} variant=\"contained\" onClick={goToChatBot}>Interactive Q&A Chat Bot</Button> <br/>\n                  <Button style={{ marginBottom: '5%'}} variant=\"contained\" onClick={logOut}>Log-Out</Button>\n               </Paper>\n            </Grid>\n            <Grid item xs={4}/>\n         </Grid>\n      </div>\n   );\n};\n\nexport default MainMenu;","import * as React from 'react';\nimport { DataGrid } from '@mui/x-data-grid';\nimport {useEffect, useState} from \"react\";\nimport ScreenIds from \"./ScreenIds\";\nimport {Button, Grid, Paper, TextField} from \"@mui/material\";\n\nconst columns = [\n   {\n      field: 'id',\n      headerName: 'ID',\n      width: 90\n   },\n   {\n      field: 'name',\n      headerName: 'Name',\n      width: 150,\n      editable: true,\n   },\n];\n\nexport default function MyPresentations(props) {\n\n   useEffect(fetchPresentations, []);\n\n   /* IMPORTANT !!\n   THIS HOOK TO BE USED FOR ACTUAL DB CONNECTION\n    */\n   const [rows, setRows] = useState([]);\n\n   function goToPresentationDetails() {\n      props.onMyPresentationsHandler(ScreenIds.PRESENTATION_DETAILS_SCREEN_ID);\n   }\n\n   function goToProgressTracking() {\n      props.onMyPresentationsHandler(ScreenIds.PROGRESS_TRACKING_SCREEN_ID);\n   }\n\n   /* DO NOT OPEN BELOW COMMENT */\n   //const [selectionModel, setSelectionModel] = useState(() => rows.filter((r) => true).map((r) => r.presentation_id));\n   const [selectedRows, setSelectedRows] = useState([]);\n\n   function goBackToMainMenu() {\n      props.onMyPresentationsHandler(ScreenIds.MAIN_MENU_SCREEN_ID);\n   }\n\n   function fetchPresentations() {\n      getPresentations(userData);\n   }\n\n   const getPresentations = (userID) => {\n      let success = true;\n      fetch('http://localhost:5000/getPresentations', {\n         method: 'POST',\n         headers: {\n            'Content-Type':'application/json'\n         },\n         body:JSON.stringify(userID)\n      })\n         .then((resp) => {\n            return resp.json()\n         })\n         .then((data) => {\n            console.log(data);\n            setRows(fixData(data));\n            console.log(rows);\n         })\n         .catch(error => console.log(error))\n\n      return success;\n   };\n\n   const userData = {\n      \"userID\": props.currentUserID\n   };\n\n   function fixData (arr2d) {\n\n      let fixedRows = [];\n\n      for (let i = 0; i < arr2d.length; i++) {\n         let newObj = {};\n         newObj.id = arr2d[i][0];\n         newObj.name = arr2d[i][1];\n         newObj.transcript = arr2d[i][2];\n         newObj.user_id = arr2d[i][3];\n         newObj.wpm = arr2d[i][4];\n         newObj.duration = arr2d[i][5];\n         newObj.filler_ratio = arr2d[i][6];\n         newObj.word_count = arr2d[i][7];\n         newObj.gap_ratio = arr2d[i][8];\n         newObj.fd_score = arr2d[i][9];\n         newObj.grade = arr2d[i][10];\n         newObj.dragged_ratio = arr2d[i][11];\n         newObj.repeated_ratio = arr2d[i][12];\n         newObj.p_date = arr2d[i][13];\n\n         fixedRows.push(newObj);\n      }\n      return fixedRows;\n   }\n\n   return (\n      <div>\n         {fetchPresentations}\n         <Grid container spacing={2}>\n\n            <Grid item xs={12}>\n               <h1 style={{color:'whitesmoke'}}>My Presentations</h1>\n            </Grid>\n\n            <Grid item xs={3}/>\n            <Grid item xs={6}>\n               <Paper sx={{backgroundColor:'whitesmoke', height:400, marginTop: '2.5%', marginBottom:'5%', flexDirection:'row', alignItems:'center', justifyContent:'center'}} elevation={8}>\n                  <DataGrid\n                     rows={rows}\n                     columns={columns}\n                     pageSize={5}\n                     rowsPerPageOptions={[5]}\n                     checkboxSelection\n                     disableSelectionOnClick\n\n                     //selectionModel={selectionModel}\n                     onSelectionModelChange={(ids) => {\n                        const selectedIDs = new Set(ids);\n                        const selectedRows = rows.filter((row) =>\n                           selectedIDs.has(row.id),\n                        );\n\n                        setSelectedRows(selectedRows);}}\n                  />\n                  {console.log(JSON.stringify(selectedRows, null, 4))}\n                  <br/>\n               </Paper>\n               <Paper sx={{marginRight:'25%', marginLeft:'25%', backgroundColor:'whitesmoke'}} elevation={8}>\n                  <Button style={{marginTop:'5%'}} disabled={!(selectedRows.length === 1)} variant=\"contained\" onClick={goToPresentationDetails}>View Report</Button><br/><br/>\n                  <Button  disabled={!(selectedRows.length >= 2)} variant=\"contained\" onClick={goToProgressTracking}>See Progress</Button><br/><br/>\n                  <Button data-testid=\"my_presentations_go_back\" style={{marginBottom:'5%', color:\"white\"}} variant=\"contained\" onClick={goBackToMainMenu}>Back To Main Menu</Button>\n               </Paper>\n            </Grid>\n            <Grid item xs={3}/>\n         </Grid>\n         {props.onPresentationSelection(selectedRows)}\n      </div>\n   );\n}","import * as React from 'react';\nimport {Card, Grid} from \"@mui/material\";\nimport ScreenIds from \"./ScreenIds\";\nimport {Button, Paper, TextField} from \"@mui/material\";\nimport {useState} from \"react\";\n\nexport default function PresentationDetails(props) {\n\n\n\n   function goBackToMyPresentations(){\n      props.onPresentationDetails(ScreenIds.MY_PRESENTATIONS_SCREEN_ID);\n   }\n\n   async function deletePresentation(){\n      let id = props.selectedPresentations[0].id;\n      let success = true;\n      await fetch('http://localhost:5000/deletePresentation', {\n         method: 'POST',\n         headers: {\n            'Content-Type':'application/json'\n         },\n         body:JSON.stringify(id)\n      })\n         .then((resp) => {\n            return resp.json()\n         })\n         .then((data) => {\n            console.log(data);\n         })\n         .catch(error => console.log(error))\n\n      goBackToMyPresentations();    \n      return success;\n   };\n\n   \n\n   const str_type_regular = 0;\n   const str_type_filler = 1;\n   const str_type_gap = 2;\n   const str_type_repeated = 3;\n   const str_type_dragged = 4;\n\n   //const [processedTranscriptArr, setTranscriptArr] = useState([]);\n\n   function goToTextTranscript() {\n      let transcript = props.selectedPresentations[0].transcript;\n\n      // let transcript = \"The short story is {dragged} usually concerned with a single {dragged/} effect conveyed in only one or {repeated} a few significant episodes {repeated/} or scenes. The form {filler} encourages {filler/} economy of setting, {dragged} concise {repeated} narrative, and the {repeated/} omission of a {dragged/} complex plot; character is disclosed {/space/} in action and dramatic encounter but is seldom fully developed. Despite {/space/} its relatively limited scope, though, a short story is often judged by its ability {dragged} to provide {/space/} a “complete” or {dragged/} satisfying treatment of its characters and subject.\";\n\n      let transcriptTokens = transcript.split(\" \");\n\n      let processTranscriptArrTemp = [];\n      let tagStack = [];\n\n      tagStack.push(str_type_regular);\n\n      for (let i = 0; i < transcriptTokens.length; i++) {\n         // console.log(\"i:\" + transcriptTokens[i]);\n         let token = transcriptTokens[i];\n         if( token !== \"\"){\n            if(token === \"{dragged}\"){\n               tagStack.push(str_type_dragged);\n            }\n            else if (token === \"{dragged/}\"){\n               tagStack.pop();\n            }\n            else if(token === \"{filler}\"){\n               tagStack.push(str_type_filler);\n            }\n            else if (token === \"{filler/}\"){\n               tagStack.pop();\n            }\n            else if(token === \"{repeated}\"){\n               tagStack.push(str_type_repeated);\n            }\n            else if (token === \"{repeated/}\"){\n               tagStack.pop();\n            }\n            // todo check\n            else if (token === \"{/space/}\"){\n               transcriptTokens[i] = \"(...)\";\n            }\n            // console.log(\"TRANSCRIPT TOKEN:\" + transcriptTokens[i]);\n\n            // push into the array\n            if( transcriptTokens[i] === \"(...)\" || transcriptTokens[i][0] !== \"{\"){\n               if( transcriptTokens[i] !== \"(...)\"){\n                  processTranscriptArrTemp.push( { type: tagStack[tagStack.length-1], word: transcriptTokens[i]} );\n               }\n               else {\n                  processTranscriptArrTemp.push( { type: str_type_gap, word: transcriptTokens[i]} );\n               }\n            }\n         }\n      }\n\n      console.log(processTranscriptArrTemp);\n      props.processTranscriptHandler(processTranscriptArrTemp);\n      // variable: processTranscriptArrTemp\n      // hook: processedTranscriptArr, setTranscriptArr\n\n      props.onPresentationDetails(ScreenIds.TRANSCRIPT_DETAILS_SCREEN_ID);\n   }\n\n   return(\n      <div>\n\n         <Grid container spacing={2}>\n\n            <Grid item xs={12}>\n               <h2 style={{color:'whitesmoke'}}>{props.selectedPresentations[0].name} Presentation </h2>\n               <p style={{color:'whitesmoke'}}>Detailed Analysis Report</p>\n            </Grid>\n\n            <Grid item xs={5}/>\n            <Grid item xs={2}>\n               <Card sx={{backgroundColor:'#E5E5E5'}} elevation={4}>\n                  <Card sx={{marginTop:'8%', marginBottom:'8%', marginLeft: '8%', marginRight: '8%', }} elevation={4}>\n                     <h3> Final Grade is : { (Math.round(100 * props.selectedPresentations[0].grade * 100) / 100).toFixed(2) }</h3>\n                  </Card>\n               </Card>\n            </Grid>\n            <Grid item xs={5}/>\n\n            <Grid item xs={2}/>\n            <Grid item xs={4}>\n               <Card sx={{backgroundColor:'#E5E5E5', textAlign:\"left\", marginLeft: '5%', marginRight: '5%'}} elevation={8}>\n\n                  <Card sx={{ marginLeft: '8%', marginRight: '8%', marginBottom: '8%', marginTop:'5%'}} elevation={4}>\n                     <p style={{marginLeft: '2.5%'}}><u>Grades:</u></p>\n                     <p style={{marginLeft: '2.5%'}}>Gap Grade : { (Math.round(100 * (1 - props.selectedPresentations[0].gap_ratio) * 100) / 100).toFixed(2) }</p>\n                     <p style={{marginLeft: '2.5%'}}>Filler Grade : { (Math.round(100 * (1 - props.selectedPresentations[0].filler_ratio) * 100) / 100).toFixed(2) }</p>\n                     <p style={{marginLeft: '2.5%'}}>Face Recognition Score : {(Math.round(100 * props.selectedPresentations[0].fd_score))}</p>\n                  </Card>\n\n                  <Card sx={{ marginLeft: '8%', marginRight: '8%', marginBottom: '8%'}} elevation={4}>\n\n                     <p style={{marginLeft: '2.5%'}}>Statistics:  </p>\n                     <ul align=\"left\">\n                        <li>You dragged { (Math.round(100 * props.selectedPresentations[0].dragged_ratio * 100) / 100).toFixed(2) } % of the time. </li>\n                        <li>You filled time { (Math.round(100 * props.selectedPresentations[0].filler_ratio * 100) / 100).toFixed(2) } % of the time. </li>\n                        <li>You were silent { (Math.round(100 * props.selectedPresentations[0].gap_ratio * 100) / 100).toFixed(2) } % of the time. </li>\n                     </ul>\n                  </Card>\n               </Card>\n            </Grid>\n            <Grid item xs={4}>\n               <Card sx={{backgroundColor:'#E5E5E5', textAlign:\"left\", marginLeft: '5%', marginRight: '5%'}} elevation={8}>\n\n                  <Card sx={{ marginLeft: '8%', marginRight: '8%', marginBottom: '8%', marginTop:'5%'}} elevation={4}>\n                     <p style={{textIndent: '2.5%' , marginTop: '4%'}}>Duration : {props.selectedPresentations[0].duration} seconds</p>\n                  </Card>\n\n                  <Card sx={{ marginLeft: '8%', marginRight: '8%', marginBottom: '8%'}} elevation={4}>\n                     <p style={{marginLeft: '2.5%'}}><u>Speech Feedback:</u></p>\n                     <p style={{marginLeft: '2.5%'}}>Percentage of Filler Words : {props.selectedPresentations[0].filler_ratio}</p>\n                  </Card>\n\n                  <Card sx={{ marginLeft: '8%', marginRight: '8%', marginBottom: '8%'}} elevation={4}>\n\n                     <p style={{ marginLeft: '2.5%'}}>Word per minute (wpm) : {props.selectedPresentations[0].wpm}</p>\n\n                  </Card>\n                  <ul align=\"left\">\n                     <li style={{color:'#E5E5E5'}}> <br/> </li>\n                     <li style={{color:'#E5E5E5'}}> <br/> </li>\n                  </ul>\n               </Card>\n            </Grid>\n         </Grid>\n         <Button style={{marginTop:'1.5%'}} variant=\"contained\" onClick={goToTextTranscript}>See Text Transcript</Button><br/>\n         <Button style={{marginTop:'1.5%'}} variant=\"contained\" onClick={deletePresentation}>Delete Presentation</Button><br/>\n         <Button style={{marginTop:'1.5%'}} variant=\"contained\" onClick={goBackToMyPresentations}>Back To My Presentations</Button><br/><br/><br/>     \n      </div>\n   );\n}","import ScreenIds from \"./ScreenIds\";\nimport {Button, Grid, Paper, TextField} from \"@mui/material\";\nimport React, {useState} from \"react\";\n\nexport default function TranscriptDetails(props) {\n\n\n   function goBackToPresentationDetails() {\n      props.onTranscriptDetails(ScreenIds.PRESENTATION_DETAILS_SCREEN_ID);\n   }\n\n   // const [processedTranscriptArr, setTranscriptArr] = useState([]);\n\n   // now obsolete\n   function processTranscript() {\n\n      console.log(props.processedTranscriptArr);\n\n\n   }\n\n\n   const str_type_regular = 0;\n   const str_type_filler = 1;\n   const str_type_gap = 2;\n   const str_type_repeated = 3;\n   const str_type_dragged = 4;\n\n   function TranscriptDisplay(typeOfWord, word) {\n      // const trArr = props.processedTranscriptArr;\n\n      if (typeOfWord === str_type_regular) { // regular white\n         return <span style={{backgroundColor: \"#FFFFFF\"}}>{word} </span>;\n      } else if (typeOfWord === str_type_filler) { // filler yellow\n         return <span style={{backgroundColor: \"#FFFF00\"}}>{word} </span>;\n      } else if (typeOfWord === str_type_gap) { // gap red\n         return <span style={{backgroundColor: \"#FF0000\"}}> {word} </span>;\n      } else if (typeOfWord === str_type_repeated) { // repeated green\n         return <span style={{backgroundColor: \"#00FF00\"}}>{word} </span>;\n      } else if (typeOfWord === str_type_dragged) { // dragged blue\n         return <span style={{ backgroundColor:\"#4fc3f7\"}}>{word} </span>\n      }\n   }\n\n   // <Button variant=\"contained\" onClick={processTranscript}>Print</Button>\n\n   function printArr(){\n      console.log(props.processedTranscriptArr);\n   }\n\n   // <Button variant=\"contained\" onClick={printArr}>print</Button>\n\n   return(\n      <div>\n         <Grid container>\n            <Grid item xs={12}>\n               <h2 style={{color:'whitesmoke'}}>Transcript of \"{props.selectedPresentations[0].name}\"</h2>\n            </Grid>\n\n            <Grid item xs={7} style={{ marginTop: '1.65%', marginLeft: '2%'}}>\n\n               <Paper elevation={3} style={{ padding:'2%'}}>\n                     { (props.processedTranscriptArr).map(item => (\n                        TranscriptDisplay(item.type, item.word)))\n                     }\n               </Paper>\n\n            </Grid>\n            <Grid item xs={1}/>\n            <Grid item xs={4} style={{ marginLeft: '-4%'}}>\n               <Paper elevation={3} style={{ margin: '5%', paddingBottom:'1%'}}>\n                  Legend\n                  <ul align=\"left\">\n                     <li> <p> <span style={{ backgroundColor:\"#FFFFFF\"}}> Regular text </span>  </p> </li>\n                     <li> <p> <span style={{ backgroundColor:\"#4fc3f7\"}}> Dragged </span>  </p> </li>\n                     <li> <p> <span style={{ backgroundColor:\"#00FF00\"}}> Repeated </span>  </p> </li>\n                     <li> <p> <span style={{ backgroundColor:\"#FFFF00\"}}> Filler </span>  </p> </li>\n                     <li> <p> <span style={{ backgroundColor:\"#FF0000\"}}> Big gap </span> </p> </li>\n                  </ul>\n               </Paper>\n               <Paper elevation={3} style={{ margin: '5%', paddingBottom:'1%'}}>\n                  Statistics\n                  <ul align=\"left\">\n                     <li>You dragged { (Math.round(100 * props.selectedPresentations[0].dragged_ratio * 100) / 100).toFixed(2) } % of the time. </li>\n                     <li>You filled time { (Math.round(100 * props.selectedPresentations[0].filler_ratio * 100) / 100).toFixed(2) } % of the time. </li>\n                     <li>You were silent { (Math.round(100 * props.selectedPresentations[0].gap_ratio * 100) / 100).toFixed(2) } % of the time. </li>\n                  </ul>\n               </Paper>\n            </Grid>\n\n            <Grid style={{ marginTop: '5%', paddingBottom:'5%'}} item xs={12}>\n               <Button variant=\"contained\" onClick={goBackToPresentationDetails}>Back To Presentation Details</Button>\n\n            </Grid>\n            <Grid item xs={4}/>\n\n\n         </Grid>\n\n      </div>\n   );\n}","import React, { useState, useEffect, useRef } from \"react\";\nimport {render} from \"react-dom\";\nimport * as ReactDOM from \"react-dom\";\nimport ScreenIds from \"./ScreenIds\";\nimport {Button, Grid, Paper, TextField} from \"@mui/material\";\nimport DialogBox from \"./DialogBox\";\n\n\n\nconst addUser = (newUser) => {\n   fetch('http://localhost:5000/register', {\n      method: 'POST',\n      headers: {\n         'Content-Type':'application/json'\n      },\n      body:JSON.stringify(newUser)\n   })\n   .then(resp => resp.json())\n   .then((data) => {\n      console.log(data)\n   })\n   .catch(error => console.log(error))\n   console.log(\"can\");\n};\n\nconst SignUp = (props) => {\n\n   const [dialogContent, setDialogContent] = useState(\"Sign Up\");\n   const [dialogTitle, setDialogTitle] = useState(\"Sign Up\");\n\n   const [dialogOpen, setDialogOpen] = useState(false);\n   const handleClose = () => {\n      setDialogOpen(false);\n   };\n\n   function attemptSignup() {\n\n      const username = document.getElementById('register_username')\n      const email = document.getElementById('register_email')\n      const password = document.getElementById('register_password')\n      const password2 = document.getElementById('register_password_2')\n\n      // todo check login credentials\n      let signUpSuccessful = true;\n\n      if (password.value !== password2.value) {\n         signUpSuccessful = false;\n         setDialogTitle(\"Passwords do not match!\");\n         setDialogContent(\"Please re-enter your passwords.\")\n         setDialogOpen(true);\n      }\n      else if (username.value === \"\" || email.value === \"\" || password.value === \"\" || password2.value === \"\") {\n         signUpSuccessful = false;\n         setDialogTitle(\"Some fields are empty!\");\n         setDialogContent(\"Please fill the empty field or fields.\");\n      }\n\n      const newData = {\n         \"username\": username.value,\n         \"email\": email.value,\n         \"password\": password.value\n      };\n\n      if (signUpSuccessful)\n         addUser(newData);\n\n\n      // TODO we are doing something completely different here...\n      // if successful change to main menu\n      if ( signUpSuccessful){\n         props.onSignUpHandler(ScreenIds.LOGIN_SCREEN_ID);\n      }\n\n      // otherwise reshow the login screen\n      else {\n         setDialogOpen(true);\n\n      }\n   }\n\n   function goToLogin() {\n\n      props.onSignUpHandler(ScreenIds.LOGIN_SCREEN_ID)\n   }\n\n   return (\n      <Grid container spacing={2}>\n\n         <Grid item xs={3}/>\n         <Grid item xs={6}>\n            <h1 style={{color:'whitesmoke'}}> Sign Up To Prexcel</h1>\n            <Paper style={{marginTop: '20%', marginBottom:'5%', flexDirection:'row', alignItems:'center', justifyContent:'center', backgroundColor: 'whitesmoke'}} elevation={8}>\n               <p style={{paddingTop: '5%'}}> Please fill in the following information to sign-up.</p>\n\n               <Grid style={{ marginTop: '5%', marginBottom: '5%'}} item xs={12}>\n                  <Paper sx={{backgroundColor: 'white', marginRight: '36%', marginLeft: '36%'}} elevation={4}>\n                     <TextField sx={{width:'99%', border: \"2px solid #2c778f\", borderRadius:'5px',}} data-testid=\"register_username_id\" id=\"register_username\" label=\"Username\" variant=\"filled\" required/>\n                  </Paper>\n               </Grid>\n               <Grid style={{ marginTop: '5%'}} item xs={12}>\n                  <Paper sx={{backgroundColor: 'white', marginRight: '36%', marginLeft: '36%'}} elevation={4}>\n                     <TextField sx={{width:'99%', border: \"2px solid #2c778f\", borderRadius:'5px',}} data-testid=\"register_email_id\" id=\"register_email\" label=\"Email\" variant=\"filled\" required/>\n                  </Paper>\n               </Grid>\n               <Grid style={{ marginTop: '5%'}} item xs={12}>\n                  <Paper sx={{backgroundColor: 'white', marginRight: '36%', marginLeft: '36%'}} elevation={4}>\n                     <TextField sx={{width:'99%', border: \"2px solid #2c778f\", borderRadius:'5px',}} type=\"password\" data-testid=\"register_password_id_1\" id=\"register_password\" label=\"Password\" variant=\"filled\" required/>\n                  </Paper>\n               </Grid>\n               <Grid style={{ marginTop: '5%', marginBottom: '5%'}} item xs={12}>\n                  <Paper sx={{backgroundColor: 'white', marginRight: '36%', marginLeft: '36%'}} elevation={4}>\n                     <TextField sx={{width:'99%', border: \"2px solid #2c778f\", borderRadius:'5px',}} type=\"password\" data-testid=\"register_password_id_2\" id=\"register_password_2\" label=\"Confirm Password\" variant=\"filled\" required/>\n                  </Paper>\n               </Grid>\n               <Grid style={{ marginTop: '5%', paddingBottom:'5%'}} item xs={12}>\n                  <Button data-testid=\"signup_button_id\" style={{ marginRight: '5%'}} variant=\"contained\" onClick={attemptSignup}>SignUp</Button>\n                  <Button data-testid=\"cancel_button_id\" variant=\"contained\" onClick={goToLogin}>Cancel</Button>\n                  <DialogBox data-testid=\"signup_error_message_id\" open={dialogOpen} onClose={handleClose}\n                             dialogContent={dialogContent}\n                             dialogTitle={dialogTitle}/>\n               </Grid>\n            </Paper>\n\n\n\n         </Grid>\n         <Grid item xs={3}/>\n\n\n\n      </Grid>\n\n\n   );\n}\n\nexport default SignUp;","import React, {useState, useEffect, useRef} from \"react\";\nimport {render} from \"react-dom\";\nimport * as ReactDOM from \"react-dom\";\nimport ScreenIds from \"./ScreenIds\";\n\nimport {Button, Grid, Paper, TextField} from \"@mui/material\";\n\nlet transcriptRunning = false;\n\nvar interval1 = 0;\nvar interval2 = 0;\nvar interval3 = 0;\nvar interval4 = 0;\n\nexport default function LivePresentation(props) {\n\n\n   const [fd_flag, setFdFlag] = useState(\"\");\n   const [decibel_flag, setDecibel] = useState(0);\n   const [transcript, setTranscript] = useState(\"\");\n   const [recommendations, setRecommendations] = useState([]);\n   const [recommendation1, setRecommendation1] = useState(\"\");\n   const [recommendation2, setRecommendation2] = useState(\"\");\n   const [recommendation3, setRecommendation3] = useState(\"\");\n   const [recommendation4, setRecommendation4] = useState(\"\");\n   const [recommendation5, setRecommendation5] = useState(\"\");\n   \n\n\n   //const [tokens, setTokens] = useState(\"\");\n\n   //disable end presentation button\n   //document.getElementById(\"endPresentationButton\").disabled = true;\n   const [endButtonDisabled, setEndButtonDisabled] = useState(true);\n   const [startButtonDisabled, setStartButtonDisabled] = useState(false);\n\n   const [flagGap, setFlagGap] = useState(true);\n\n\n\n   function changeFlagGap() {\n      setFlagGap(!flagGap)\n   }\n\n   function startPresentationThreads() {\n      fetch('http://localhost:5000/startPresentation', {\n         method: 'POST',\n         headers: {\n            'Content-Type': 'application/json'\n         },\n         body:JSON.stringify(presentationData)\n      })\n         .then(resp => resp.json())\n         .then((data) => {\n            console.log(data)\n         })\n         .catch(error => console.log(error))\n   }\n\n   const presentationData = {\n      \"presentation_name\": props.newPresentationName //todo add real name\n   }\n\n   function startPresentation() {\n      //document.getElementById(\"startPresentationButton\").disabled = true;\n      //document.getElementById(\"endPresentationButton\").disabled = false;\n      setStartButtonDisabled(true);\n      setEndButtonDisabled(false);\n      startPresentationThreads();\n      //setTimeout(getFaceDetectionFlag,2000)\n      //setTimeout(getDecibel,2000)\n      getFaceDetectionFlag();\n      getDecibel();\n      getRecommendations();\n      getTranscript();\n   }\n\n   function endPresentation() {\n      clearInterval(interval1);\n      clearInterval(interval2);\n      clearInterval(interval3);\n      clearInterval(interval4);\n      setFdFlag(\"\");\n      setDecibel(\"\");\n      setTranscript(\"\");\n      \n      fetch('http://localhost:5000/endPresentation', {\n         method: 'GET',\n         headers: {\n            'Content-Type': 'application/json'\n         },\n      })\n         .then(resp => resp.json())\n         .then((data) => {\n            console.log(data)\n         })\n         .catch(error => console.log(error))\n      //transcript = \"Stopped\"\n      \n      //document.getElementById(\"endPresentationButton\").disabled = true;\n      setEndButtonDisabled(true);\n   }\n\n   /* function enableTokens(){\n          setInterval(async function (){\n             await fetch('http://localhost:5000/getTranscript', {\n             method: 'GET',\n             headers: {\n                'Content-Type':'application/json'\n             },\n             })\n             .then(resp => resp.json())\n             .then((data) => {\n                setTokens(data);\n             })\n             .catch(error => console.log(error))\n          }, 500);\n    }*/\n\n\n   function FdValue(value) {\n      // const trArr = props.processedTranscriptArr;\n\n      if (value === \"+\") {\n         return <span style={{backgroundColor: \"green\"}}>DETECTED </span>;\n      } else if (value === \"-\") {\n         return <span style={{backgroundColor: \"red\"}}>NOT DETECTED</span>;\n      }\n   }\n\n   function DecibelValue(value) {\n      // const trArr = props.processedTranscriptArr;\n\n      if (value < 10) {\n         return <span style={{backgroundColor: \"red\"}}>TOO LOW</span>;\n      } else if (value < 25) {\n         return <span style={{backgroundColor: \"yellow\"}}>LOW</span>;\n      }else if (value > 60){\n         return <span style={{backgroundColor: \"red\"}}>TOO HIGH</span>;\n      }else if (value > 50){\n         return <span style={{backgroundColor: \"yellow\"}}>HIGH</span>;\n      }else{\n         return <span style={{backgroundColor: \"green\"}}>IDEAL</span>;\n      }\n      \n   }\n\n   function getFaceDetectionFlag() {\n      var tempFlag = 0 \n      interval1 = setInterval(async function () {\n         await fetch('http://localhost:5000/getFaceDetectionFlag', {\n            method: 'GET',\n            headers: {\n               'Content-Type': 'application/json'\n            },\n         })\n            .then(resp => resp.json())\n            .then((data) => {\n               setFdFlag(data)\n            })\n            .catch(error => console.log(error))\n      }, 500);\n   }\n\n   function getDecibel() {\n      interval2 = setInterval(async function () {\n         await fetch('http://localhost:5000/getDecibelFlag', {\n            method: 'GET',\n            headers: {\n               'ContentType': 'application/json',\n               'Accept': 'application/json'\n            },\n         })\n            .then(resp => resp.json())\n            .then((data) => {\n               setDecibel(data)\n            })\n            .catch(error => console.log(error))\n      }, 500);\n   }\n\n   function getTranscript() {\n      interval3 = setInterval(async function () {\n         await fetch('http://localhost:5000/getTranscript', {\n            method: 'GET',\n            headers: {\n               'ContentType': 'application/json',\n               'Accept': 'application/json'\n            },\n         })\n            .then(resp => resp.json())\n            .then((data) => {\n               setTranscript(data)\n            })\n            .catch(error => console.log(error))\n      }, 500);\n   }\n\n   function getRecommendations() {\n      interval4 = setInterval(async function () {\n         await fetch('http://localhost:5000/getRecommendations', {\n            method: 'GET',\n            headers: {\n               'ContentType': 'application/json',\n               'Accept': 'application/json'\n            },\n         })\n            .then(resp => resp.json())\n            .then((data) => {\n               //setRecommendations(data)\n               if (data.length > 0)\n                  setRecommendation1(data[0]);\n               if (data.length > 1);\n                  setRecommendation2(data[1])\n               if (data.length > 2)   \n                  setRecommendation3(data[2])\n               if (data.length > 3)\n                  setRecommendation4(data[3])\n               if (data.length > 4)   \n                  setRecommendation5(data[4])\n            })\n            .catch(error => console.log(error))\n      }, 500);  \n\n   }\n\n   function goBackToMainMenu() {\n      props.onLivePresentationHandler(ScreenIds.MAIN_MENU_SCREEN_ID);\n   }\n\n   // <p style={{marginLeft: '5%'}}> Transcript (To be removed I believe) : {transcript} </p> <br/>\n\n   return (\n      <div>\n         <Grid container spacing={2}>\n\n            <Grid item xs={12}>\n               <h1 style={{color:'whitesmoke', flexDirection: 'row', alignItems: 'center', justifyContent: 'center'}}>\n                  Live Presentation for \"{props.newPresentationName}\"\n               </h1>\n            </Grid>\n\n            <Grid item xs={1}/>\n            <Grid item xs={7}>\n\n               <Paper sx={{backgroundColor: 'whitesmoke'}} align=\"left\" elevation={3}>\n                  <h3 style={{paddingTop:'2%', paddingLeft:'2%'}}> TRANSCRIPT</h3> <br/>\n                  <p style={{marginLeft:'2%'}} > {transcript}</p> <br/>\n\n               </Paper>\n\n\n            </Grid>\n            <Grid item xs={3}>\n\n               <Paper sx={{backgroundColor: 'whitesmoke'}} align=\"left\" elevation={3}>\n                  <p id = \"fd-flag\" style={{paddingTop: '2%', marginLeft: '5%'}}> Face Detection: {FdValue(fd_flag)}</p> <br/>\n                  <p id = \"decibel-flag\" style={{marginLeft: '5%'}}> Current Decibel: {DecibelValue(decibel_flag)}</p> <br/>\n\n               </Paper>\n\n               {flagGap &&\n                  <Paper style={{\n                     backgroundColor: 'whitesmoke',\n                     marginTop: '5%',\n                     marginBottom: '2%',\n                     flexDirection: 'row',\n                     alignItems: 'center',\n                     justifyContent: 'center'\n                  }} align=\"left\" elevation={3}>\n                     <h3 style={{paddingTop: '2%', marginLeft: '5%'}}> Word Recommendations</h3>\n                     <ul style={{paddingTop: '2%', paddingBottom: '2%', marginLeft: '5%'}}>\n                        <li> {recommendation1}</li>\n                        <li> {recommendation2}</li>\n                        <li> {recommendation3}</li>\n                        <li> {recommendation4}</li>\n                        <li> {recommendation5}</li>\n                     </ul>\n                  </Paper>\n               }\n\n\n            </Grid>\n            <Grid item xs={1}/>\n\n\n            <Grid item xs={2}/>\n            <Grid item xs={8}>\n               <Paper style={{\n                  backgroundColor: 'whitesmoke',\n                  marginTop: '1%',\n                  flexDirection: 'row',\n                  alignItems: 'center',\n                  justifyContent: 'center'\n               }} elevation={0}>\n\n                  <Button disabled={startButtonDisabled} id=\"startPresentationButton\" style={{ color:\"white\", margin: '1.5%'}}\n                          variant=\"contained\" onClick={startPresentation}>Start Presentation</Button>\n                  <Button disabled={endButtonDisabled} id=\"endPresentationButton\" style={{color:\"white\", margin: '1.5%'}}\n                          variant=\"contained\" onClick={endPresentation}>End Presentation</Button>\n                  <Button style={{margin: '1.5%'}} variant=\"contained\" onClick={goBackToMainMenu}>Back to Main\n                     Menu</Button>\n\n\n                  <Button style={{ margin: '1.5%'}} variant=\"contained\" onClick={changeFlagGap}>Enable Word Recommendations</Button>\n\n\n               </Paper>\n            </Grid>\n            <Grid item xs={2}/>\n\n         </Grid>\n      </div>\n\n   );\n};","import {Button, Card, Grid, List, Paper, TextField} from \"@mui/material\";\nimport ScreenIds from \"./ScreenIds\";\nimport React, {useRef, useState} from \"react\";\nimport SendIcon from '@mui/icons-material/Send';\nimport ArrowUpwardIcon from '@mui/icons-material/ArrowUpward';\n\n\nexport default function ChatBotScreen(props) {\n\n   const questions = [\n      {\n         position: \"left\",\n         question: \"1. How is my presentation graded?\",\n         answer: \"Your presentation is graded based on 3 criteria. First of these is the face detection score, \" +\n            \"which is a measure of how long you kept face contact with the camera. Second is the gap score, which is a \" +\n            \"measure of how much big gaps you had in your speech. Final score is the filler words/dragged words score,\" +\n            \" which is determined based on how many words you dragged, or repeated during the presentation.\",\n         color: \"lightblue\"\n      },\n      {\n         position: \"left\",\n         question: \"2. How can I start a live presentation?\",\n         answer: 'Go to the \"Start a Presentation\" tab, enter the name of your presentation and the select the option ' +\n            'for starting a live presentation. You will have a chance to calibrate your camera in this screen. ' +\n            'Once you continue to presentation screen, you can start the presentation by the relevant button. ' +\n            'You will see the your face detection and volume on the left, as well as the word recommendations right below them. ' +\n            'Your transcript will also be printed on the screen. You can end the presentation at any time and return to main menu.',\n         color: \"lightblue\"\n      },\n      {\n         position: \"left\",\n         question: \"3. How can I upload recording of a presentation?\",\n         answer: 'Go to the \"Start a Presentation\" tab,  enter the name of your presentation and the select the option ' +\n            'for uploading a presentation. Your presentation will be processed. You will not be able to move to' +\n            ' any other screen during this time. Once finished, you can see your detailed analysis report from the ' +\n            '\"My Presentations\" screen.',\n         color: \"lightblue\"\n      },\n      {\n         position: \"left\",\n         question: \"4. Is my personal data stored?\",\n         answer: 'We never store your personal data. All you data is processed on your machine locally, ' +\n            'and never uploaded to cloud.',\n         color: \"lightblue\"\n      },\n      {\n         position: \"left\",\n         question: \"5. How can I track my progress across presentations?\",\n         answer: 'From the \"My Presentations\" screen, select the presentations you want to track and select see progress report.',\n         color: \"lightblue\"\n      },\n      {\n         position: \"left\",\n         question: \"6. Can I delete my account/presentations?\",\n         answer: 'Yes. You can do both on the \"User-Account Details\" screen.',\n         color: \"lightblue\"\n      }\n   ];\n\n   function initializeChatBotMessage() {\n      let msgObj = [{\n         position: \"left\",\n         question: \"\",\n         color: \"#2979ff\"\n      }];\n      for (let i in questions) {\n         msgObj[0].question = msgObj[0].question + questions[i].question + \"\\n\";\n         //console.log(msgObj[0].question);\n      }\n      return msgObj;\n   }\n\n   const [messageList, setMessageList] = useState(initializeChatBotMessage);\n\n   const [newQuestionNumber, setNewQuestionNumber] = useState(0);\n   const [value, setValue] = useState('');\n\n\n\n   \n\n   const chatbot_end_ref = useRef(null)\n    \n   const scrollToTop = () => {\n      chatbot_end_ref.current.scrollIntoView({ behavior: \"smooth\" })\n   }\n   \n   \n   function goBackToMainMenu() {\n      props.onChatBot(ScreenIds.MAIN_MENU_SCREEN_ID);\n   }\n\n   function ChatItem(props) {\n\n      const rootStyle = {\n         width: \"100%\",\n         height: \"auto\",\n         marginTop: \"0%\",\n         marginBottom: \"0%\"\n      };\n\n      const messageStyle = {\n         width: \"51%\",\n         marginTop: \"1.5%\",\n         marginBottom: '1.5%',\n         height: \"auto\",\n         float: props.position,\n         background: props.color,\n         color: \"whitesmoke\",\n\n         overflowWrap: \"break-word\",\n         wordWrap: \"break-word\",\n         //hyphens: \"auto\"\n      };\n\n      return (\n         <div style={rootStyle}>\n            <Card elevation={8} style={messageStyle}>{props.text.split('\\n').map(str => <p\n               style={{marginLeft: '5%', marginRight: '5%'}}>{str}</p>)}</Card>\n         </div>\n      );\n   }\n\n   function makeKey() {\n      const key = Math.random().toString(16).substr(2);\n      return key;\n   }\n\n   function TextList(props) {\n\n      const key0 = makeKey();\n\n      return (\n         <List>\n            {props.messageList.map((message) => (\n               <ChatItem key={key0.toString()} position={message.position} color={message.color} text={message.question}/>))}\n         </List>\n      );\n   }\n\n   function deleteMessages() {\n      setMessageList(initializeChatBotMessage);\n   }\n\n   const questionAskHandler = (event) => {\n      setNewQuestionNumber(event.target.value);\n      setValue(event.target.value);\n   };\n\n   function questionSubmitHandler(event) {\n      event.preventDefault();\n\n      const newQuestionNumberText = {\n         position: \"right\",\n         question: newQuestionNumber.toString(),\n         color: \"gray\"\n      };\n\n      let answ = \"\";\n\n      console.log(isNaN(newQuestionNumber));\n\n      if (isNaN(newQuestionNumber))\n         answ = \"Please enter a valid question number\"; // string is not numeric\n      else if (newQuestionNumber < 1 || newQuestionNumber > questions.length)\n         answ = answ + \"Answer to the question \" + newQuestionNumber + \" is NOT available.\";\n      else\n         answ = answ + questions[newQuestionNumber - 1].answer;\n\n      const newAnswer = {\n         position: \"left\",\n         question: answ,\n         color: \"#2979ff\"\n      };\n\n      const questionList = messageList[0];\n\n      const newList = [...messageList, newQuestionNumberText, newAnswer, questionList];\n      setMessageList(newList);\n\n      setValue(\"\"); // clears the input field\n   }\n\n   return (\n      <div>\n         <Grid container spacing={2}>\n\n            <Grid item xs={3}/>\n            <Grid item xs={6} style={{height: \"100vh\"}}>\n\n               <h1 style={{color:'whitesmoke', flexDirection: 'row', alignItems: 'center', justifyContent: 'center'}}>\n                  Interactive Q&A Chat Bot\n               </h1>\n\n               <Paper\n                  id= \"paper_id\"\n                  elevation={8}\n                  sx={{\n\n                     height: '65%',\n                     maxHeight: '65%',\n                     overflow: \"auto\",\n                     marginTop: '5%',\n                     marginBottom: '5%',\n                     alignItems: 'center',\n                     justifyContent: 'center',\n                     backgroundColor: 'whitesmoke',\n                     padding: \"5%\"\n                  }}\n                  className=\"App\"\n               >\n                  <TextList messageList={messageList}/>\n                  <div ref={chatbot_end_ref}/>\n               </Paper>\n\n               <form onSubmit={questionSubmitHandler}>\n                  <Button onClick={scrollToTop} style={{color:\"#2979ff\"}} size=\"large\" endIcon={<ArrowUpwardIcon/>} variant=\"text\"> </Button>\n                  <TextField size=\"small\" sx={{\n                     marginLeft: '1%',\n                     marginRight: '1%',\n                     alignItems: 'center',\n                     border: \"2px solid #507786\",\n                     borderRadius: '5px',\n                     backgroundColor: 'whitesmoke'\n                  }} value={value} onChange={questionAskHandler} required\n                             label=\"Enter question no\"\n                             variant=\"filled\"/>\n\n                  <Button size=\"large\" type=\"submit\" endIcon={<SendIcon/>} style={{fontSize:'119%'}}\n                          variant=\"contained\">send</Button><br/>\n\n               </form>\n               <Button style={{marginTop: '2%', marginRight:'1%'}} variant=\"contained\"\n                       onClick={deleteMessages}>Clear</Button>\n               <Button data-testid=\"main_menu_button_id\" style={{marginTop: '2%', marginLeft:'1%'}} variant=\"contained\"\n                       onClick={goBackToMainMenu}>Main Menu</Button>\n            </Grid>\n            <Grid item xs={3}/>\n\n         </Grid>\n      </div>\n   );\n}\n//<Paper sx={{marginLeft:'40%', marginRight:'40%', alignItems:'center', backgroundColor: 'lightblue'}} elevation={4}>","import React, { useState, useEffect, useRef } from \"react\";\nimport {render} from \"react-dom\";\nimport * as ReactDOM from \"react-dom\";\nimport ScreenIds from \"./ScreenIds\";\nimport {Button, Grid, Paper, TextField} from \"@mui/material\";\n\nconst deleteUser = () => {\n   let success = true;\n   fetch('http://localhost:5000/deleteUser', {\n      method: 'POST',\n      headers: {\n         'Content-Type':'application/json'\n      },\n   })\n      .then((resp) => {\n         return resp.json()\n      })\n      .then((data) => {\n         console.log(data)\n      })\n      .catch(error => {\n         console.log(error)\n         success = false\n      })\n\n   return success;\n};\n\nconst UserAccountDetails = (props) => {\n   const [id, setID] = useState([]);\n   const [username, setUsername] = useState([]);\n   const [presentationCount, setPresentationCount] = useState([]);   \n   const [email, setEmail] = useState([]);  \n\n   useEffect(() => {\n      getUserInfo();\n    }, []);\n\n   function attemptDelete() {\n      let deleteSuccessful = deleteUser();\n\n      // if successful change to main menu\n      if ( deleteSuccessful){\n         goToLogin();\n      }\n\n      else {\n\n      }\n   }\n\n   function goToLogin() {\n      props.onUserAccountDetailsHandler(ScreenIds.LOGIN_SCREEN_ID);\n   }\n\n   function goToMainMenu(){\n      props.onUserAccountDetailsHandler(ScreenIds.MAIN_MENU_SCREEN_ID);\n   }\n\n   function getUserInfo(){\n      let success = true;\n      fetch('http://localhost:5000/getUserInfo', {\n         method: 'GET',\n         headers: {\n            'Content-Type':'application/json'\n         },\n\n      })\n         .then((resp) => {\n            return resp.json()\n         })\n         .then((data) => {\n            setUsername(data[0])\n            setEmail(data[2])\n            setID(data[3])\n            \n         })\n         .catch(error => console.log(error))\n\n\n         fetch('http://localhost:5000/getPresentationCount', {\n            method: 'GET',\n            headers: {\n               'Content-Type':'application/json'\n            },\n   \n         })\n            .then((resp) => {\n               return resp.json()\n            })\n            .then((data) => {\n               setPresentationCount(data)\n            })\n            .catch(error => console.log(error))\n\n      return success;\n   };\n\n   return (\n      <Grid container spacing={2}>\n         <Grid item xs={3}/>\n         <Grid item xs={6}>\n            <h1 style={{color:'whitesmoke'}}>Account details</h1>\n            <Paper style={{backgroundColor:'whitesmoke', marginTop: '20%', marginBottom:'5%', flexDirection:'row', alignItems:'center', justifyContent:'center'}} elevation={3}>\n               <p style={{color:'black', paddingTop: '5%'}}> Your current account details are as follows:</p>\n               <Grid style={{ marginTop: '5%' , marginLeft:'5%'}} item xs={12} align=\"left\">\n                  <p style={{color:'black'}}> <b>User name:</b> {username}</p>\n               </Grid>\n               <Grid style={{ marginTop: '5%' , marginLeft:'5%'}} item xs={12} align=\"left\">\n                  <p style={{color:'black'}}><b>User id:</b> {id}</p>\n               </Grid>\n               <Grid style={{ marginTop: '5%', marginLeft:'5%'}} item xs={12} align=\"left\">\n                  <p style={{color:'black'}}><b>Number of presentations in your account:</b> {presentationCount}</p>\n               </Grid>\n               <Grid style={{ marginTop: '5%', marginLeft:'5%'}} item xs={12} align=\"left\">\n                  <p style={{color:'black'}}><b>E-mail address:</b> {email}</p>\n               </Grid>\n               <Grid style={{ color:'black', marginTop: '5%', marginBottom: '5%'}} item xs={12}>\n                     You may delete your account, but beware, this process cannot be reversed!\n               </Grid>\n               <Grid style={{ marginTop: '5%', paddingBottom:'5%'}} item xs={12}>\n                  <Button style={{marginRight: '5%'}} variant=\"contained\" onClick={attemptDelete}>Delete Account</Button>\n                  <Button data-testid=\"user_account_details_button_id\" variant=\"contained\" onClick={goToMainMenu}>Back To Main Menu</Button>\n               </Grid>\n            </Paper>\n         </Grid>\n         <Grid item xs={3}/>\n\n\n\n      </Grid>\n\n\n   );\n}\n\nexport default UserAccountDetails;","import React, {useState, useEffect, useRef} from \"react\";\nimport {render} from \"react-dom\";\nimport * as ReactDOM from \"react-dom\";\nimport ScreenIds from \"./ScreenIds\";\nimport {\n   Button,\n   Dialog,\n   DialogActions,\n   DialogContent,\n   DialogContentText,\n   DialogTitle,\n   Grid,\n   Paper,\n   TextField\n} from \"@mui/material\";\nimport DialogBox from \"./DialogBox\";\n\n\nexport default function NewPresentation(props) {\n\n   const [dialogOpen, setDialogOpen] = useState(false);\n   const handleClose = () => {\n      setDialogOpen(false);\n   };\n\n   function goToMainMenu() {\n\n      props.onNewPresentationHandler(ScreenIds.MAIN_MENU_SCREEN_ID)\n   }\n\n   // TODO for goToLivePresentation, goToUploadPresentation pass the presentation name as prop as well\n   function goToLivePresentation() {\n      const name = document.getElementById('presentation_name').value;\n      if (name.length > 0) {\n         props.onNewPresentationName(name);\n         props.onNewPresentationHandler(ScreenIds.CHECK_CAMERA);\n      } else {\n         console.log(\"dialog box opening\");\n         setDialogOpen(true);\n      }\n\n   }\n\n   function goToCheckCamera() {\n      const name = document.getElementById('presentation_name').value;\n      if (name.length > 0) {\n         props.onNewPresentationName(name);\n         props.onNewPresentationHandler(ScreenIds.CHECK_CAMERA)\n      } else {\n         console.log(\"dialog box opening\");\n         setDialogOpen(true);\n      }\n\n   }\n\n   // todo\n   function goToUploadPresentation() {\n\n      const name = document.getElementById('presentation_name').value;\n      if (name.length > 0) {\n         props.onNewPresentationName(name);\n         props.onNewPresentationHandler(ScreenIds.UPLOAD_PRESENTATION_SCREEN_ID);\n      } else {\n         console.log(\"dialog box opening\");\n         setDialogOpen(true);\n      }\n\n      // props.onNewPresentationHandler(ScreenIds.PROCESSING_PRESENTATION_SCREEN_ID)\n   }\n\n   return (\n      <Grid container spacing={2}>\n\n         <Grid item xs={3}/>\n         <Grid item xs={6}>\n            <h1 style={{color:'whitesmoke'}}> Create A New Presentation...</h1>\n            <Paper style={{\n               marginTop: '20%',\n               marginBottom: '5%',\n               flexDirection: 'row',\n               alignItems: 'center',\n               justifyContent: 'center',\n               backgroundColor: 'whitesmoke'\n            }} elevation={8}>\n               <p style={{color: 'black', paddingTop: '5%'}}> Enter the name for your presentation:</p>\n\n               <Grid style={{marginTop: '5%'}} item xs={12}>\n                  <Paper sx={{ marginRight: '33%', marginLeft: '33%'}} elevation={4}>\n                     <TextField sx={{width: '99%', border: \"2px solid #2c778f\", borderRadius: '5px',}}\n                                id=\"presentation_name\" label=\"Name of the presentation\"\n                                variant=\"filled\"/>\n                  </Paper>\n               </Grid>\n\n               <Grid style={{marginTop: '5%', paddingBottom: '5%'}} item xs={12}>\n                  <Button style={{ marginRight: '5%'}} variant=\"contained\"\n                          onClick={goToLivePresentation}>Perform a Live Presentation</Button>\n                  <Button style={{ marginRight: '5%'}} variant=\"contained\"\n                          onClick={goToUploadPresentation}>Upload a Recording</Button>\n                  <Button data-testid=\"new_presentation_cancel_button_id\" variant=\"contained\"\n                          onClick={goToMainMenu}>Cancel</Button>\n                  <DialogBox open={dialogOpen} onClose={handleClose}\n                             dialogContent={\"Please enter a presentation name to continue.\"}\n                             dialogTitle={\"Presentation name is required!\"}/>\n               </Grid>\n\n\n            </Paper>\n\n         </Grid>\n         <Grid item xs={3}/>\n\n\n      </Grid>\n\n\n   );\n}","import React, { useState, useEffect, useRef } from \"react\";\nimport {render} from \"react-dom\";\nimport * as ReactDOM from \"react-dom\";\nimport ScreenIds from \"./ScreenIds\";\nimport {Button, Grid, Paper, TextField} from \"@mui/material\";\nimport { useFilePicker } from 'use-file-picker';\n\nexport default function UploadRecordingScreen(props) {\n\n   const [flagPresentationSelector, setFlagPresentationSelector] = useState(false);\n   const [flagPresentationProcessed, setPresentationProcessed] = useState(false);\n\n   const [flagProcessingPresentation, setFlagProcessingPresentation] = useState(false);\n   let path = \"\"\n\n   /*const [openFileSelector, { filesContent, loading }] = useFilePicker({\n      accept: '.txt',\n      readAs: 'DataURL'\n   });*/\n\n   function goToMainMenu() {\n      props.onUploadPresentationHandler(ScreenIds.MAIN_MENU_SCREEN_ID)\n   }\n\n   function goToPresentationDetails() {\n\n      // go to the details of the presentation that was processed\n      props.onUploadPresentationHandler(ScreenIds.PRESENTATION_DETAILS_SCREEN_ID);\n   }\n\n   function processRecording() {\n      setFlagProcessingPresentation(true);\n\n      props.uploadHandler(false);\n\n      props.onUploadPresentationHandler(ScreenIds.LOADING_SCREEN);\n\n      const processPresentation = (presentationData) => {\n         fetch('http://localhost:5000/processUploadedPresentation', {\n            method: 'POST',\n            headers: {\n               'Content-Type':'application/json'\n            },\n            body:JSON.stringify(presentationData)\n         })\n         .then((resp) => {\n            console.log(resp.json())\n\n            props.uploadHandler(true);\n\n            return resp.json()\n         })\n\n         .catch(error => console.log(error))\n      };\n\n      const presentationData = {\n         \"path\": path,\n         \"presentation_name\": props.newPresentationName,\n      }\n\n\n      processPresentation(presentationData);\n\n\n      setPresentationProcessed(true);\n   }\n\n   function onFileSelected(){\n      setFlagPresentationSelector(true);\n      console.log(\"called function\");\n      let file = document.getElementById(\"file\") \n      if(file){\n         path = file.files[0].path;\n         console.log(\"in if\");\n      }\n   }\n   /*async function selectPresentation(){\n      //console.log(dialog.showOpenDialog({properties: ['openFile', 'openDirectory', 'multiSelections']}))\n      const dir = await window.showDirectoryPicker();\n      console.log(\"can\");\n      console.log(dir.getFileHandle());\n      //openFileSelector();\n      setFlagPresentationSelector(true);\n   }*/\n\n   return (\n      <Grid container spacing={2}>\n\n         <Grid item xs={2}/>\n         <Grid item xs={8}>\n            <h1 style={{color:'whitesmoke'}}>Select a Recording To Analyze...</h1>\n            <Paper style={{backgroundColor:'whitesmoke', marginTop: '20%', marginBottom:'5%', flexDirection:'row', alignItems:'center', justifyContent:'center'}} elevation={3}>\n               <p style={{paddingTop: '5%'}}>Name of the presentation: {props.newPresentationName}</p>\n               <input id=\"file\" type=\"file\" onChange={onFileSelected} onInput={onFileSelected}/>\n\n               <Grid style={{ marginTop: '5%', paddingBottom:'5%'}} item xs={12}>\n\n                  <Button style={{ margin: '5%'}} variant=\"contained\" onClick={goToMainMenu}>Cancel</Button>\n\n\n                  { flagPresentationSelector === false &&\n                     <Button style={{ margin: '5%'}} variant=\"contained\" disabled>Process The Recording</Button>\n                  }\n\n                  { flagPresentationSelector &&\n                     <Button style={{ margin: '5%'}} variant=\"contained\" onClick={processRecording}>Process The Recording</Button>\n                  }\n\n                  { /*flagPresentationProcessed &&\n                     <Button style={{ margin: '5%'}} variant=\"contained\" onClick={goToPresentationDetails}>Continue to the Report</Button>\n                  */}\n\n                  {/* flagPresentationSelector && flagProcessingPresentation && flagPresentationProcessed === false &&\n                     <Button style={{ margin: '5%'}} variant=\"contained\" disabled>Your presentation is being processed...</Button>\n                  */}\n                  {/* flagPresentationSelector === false &&\n                     <Button style={{ marginRight: '5%'}} variant=\"contained\" disabled>Continue to the Report</Button>\n                  */}\n\n               </Grid>\n            </Paper>\n\n         </Grid>\n         <Grid item xs={2}/>\n\n\n\n      </Grid>\n\n\n   );\n}","import {Button, Grid, Paper} from \"@mui/material\";\nimport ScreenIds from \"./ScreenIds\";\nimport * as React from \"react\";\nimport { Chart, registerables } from 'chart.js';\n\nimport {Line} from 'react-chartjs-2';\n\nexport default function ProgressTracking(props) {\n\n   Chart.register(...registerables);\n\n   function formData(objArr, dataType) {\n      let data = [];\n      for (const obj of objArr) {\n         data.push(returnDataObj(obj, dataType));\n      }\n      return data;\n   }\n\n   function returnDataObj(obj, dataType) {\n      if (dataType === \"name\")\n         return obj.name;\n      else if (dataType === \"fd_score\")\n         return obj.fd_score;\n      else if (dataType === \"grade\")\n         return (Math.round(100 * obj.grade * 100) / 100).toFixed(2);\n      else if (dataType === \"gap\")\n         return (Math.round(100 * (1 - obj.gap_ratio) * 100) / 100).toFixed(2);\n      else if (dataType === \"filler\")\n         return (Math.round(100 * (1 - obj.filler_ratio) * 100) / 100).toFixed(2);\n   }\n\n   const state = {\n      labels: formData(props.selectedPresentations, \"name\"),\n      datasets: [\n         {\n            label: 'Final Grade',\n            fill: false,\n            lineTension: 0,\n            backgroundColor: 'black',\n            borderColor: 'black',\n            borderWidth: 2,\n            data: formData(props.selectedPresentations, \"grade\")\n         },\n         {\n            label: 'Face Detection Score',\n            fill: false,\n            lineTension: 0,\n            backgroundColor: '#0d98ba',\n            borderColor: '#0d98ba',\n            borderWidth: 2,\n            data: formData(props.selectedPresentations, \"fd_score\")\n         },\n         {\n            label: 'Gap Score',\n            fill: false,\n            lineTension: 0,\n            backgroundColor: '#56358a',\n            borderColor: '#56358a',\n            borderWidth: 2,\n            data: formData(props.selectedPresentations, \"gap\")\n         },\n         {\n            label: 'Filler Score',\n            fill: false,\n            lineTension: 0,\n            backgroundColor: 'green',\n            borderColor: 'green',\n            borderWidth: 2,\n            data: formData(props.selectedPresentations, \"filler\")\n         }\n      ]\n   }\n\n   function goToMyPresentations() {\n      props.onProgressTracking(ScreenIds.MY_PRESENTATIONS_SCREEN_ID);\n   }\n\n   function PresentationInstance(pName, pDate) {\n\n      return <li>  <p> {pName}  -  {pDate} </p> </li>;\n   }\n\n   return (\n      <div>\n         <Grid container spacing={2}>\n\n            <Grid item xs={12}>\n               <h1 style={{color:'whitesmoke'}}>Progress Tracking</h1>\n            </Grid>\n\n            <Grid item xs={1}/>\n            <Grid item xs={7}>\n\n               <Paper sx={{backgroundColor:'#E5E5E5', padding:'3%'}} elevation={8}>\n                  <Line\n                     data={state}\n                     options={{\n                        title:{\n                           display:true,\n                           text:'Average Rainfall per month',\n                           fontSize:20\n                        },\n                        legend:{\n                           display:true,\n                           position:'right'\n                        }\n                     }}\n                  />\n               </Paper>\n\n               <Button variant=\"contained\" onClick={goToMyPresentations}>Back</Button>\n\n            </Grid>\n            <Grid item xs={3}>\n               <Paper sx={{backgroundColor:'#E5E5E5', padding:'1%'}} elevation={8}>\n                  <ul align=\"left\">\n                     { (props.selectedPresentations).map(item => (\n                        PresentationInstance(item.name, new Date(String(item.p_date)).toDateString() )))\n                     }\n                  </ul>\n               </Paper>\n\n            </Grid>\n            <Grid item xs={1}/>\n\n         </Grid>\n      </div>\n   );\n}","import React, { useState, useEffect, useRef } from \"react\";\nimport {render} from \"react-dom\";\nimport * as ReactDOM from \"react-dom\";\nimport ScreenIds from \"./ScreenIds\";\n\nimport {Button, Grid, Paper, TextField} from \"@mui/material\";\n\nconst CheckCamera = (props) => {\n\n   const [playing, setPlaying] = useState(false);\n\n\n   function startVideo() {\n      setPlaying(true);\n      navigator.getUserMedia(\n         {\n            video: true,\n         },\n         (stream) => {\n            let video = document.getElementsByClassName(\"app__videoFeed\")[0];\n            if (video) {\n               video.srcObject = stream;\n            }\n         },\n         (err) => console.error(err)\n      );\n   }\n\n   function stopVideo() {\n      setPlaying(false);\n      let video = document.getElementsByClassName(\"app__videoFeed\")[0];\n      video.srcObject.getTracks()[0].stop();\n   }\n\n   // todo\n   function goToLivePresentation(){\n\n      props.onCheckCameraHandler(ScreenIds.LIVE_PRESENTATION_FEEDBACK_SCREEN_ID);\n   }\n\n\n   return (\n      <div>\n         <Grid container spacing={2}>\n            <Grid item xs={12} >\n               <h1 style={{color:'whitesmoke', flexDirection:'row', alignItems:'center', justifyContent:'center'}} >\n                  Prexcel\n               </h1><br/>\n               <h1 style={{color:'whitesmoke', flexDirection:'row', alignItems:'center', justifyContent:'center'}} >The Multifunctional Presentation Assistant\n               </h1><br/>\n            </Grid>\n            <Grid item xs={2}/>\n            <Grid item xs={8}>\n               <Paper sx={{marginTop: '1.7%', backgroundColor: 'dimgray'}} align=\"center\"\n                      elevation={1}>\n                  <video  width='80%' muted autoPlay className=\"app__videoFeed\"/><br/>\n               </Paper>\n\n               {playing ? (\n                  <Button style={{marginTop:\"3%\"}} variant=\"contained\" onClick={stopVideo}> Stop Camera </Button>) : (\n                  <Button style={{marginTop:\"3%\"}} variant=\"contained\" onClick={startVideo}> Start Camera </Button>)}\n\n               {!playing &&\n                  <Button style={{marginLeft:\"3%\", marginTop:\"3%\"}} variant=\"contained\" onClick={goToLivePresentation}>Continue To Presentation</Button>}\n\n               {playing &&\n                  <Button style={{marginLeft:\"3%\", marginTop:\"3%\"}} disabled variant=\"contained\">Cannot Proceed to Presentation While Your Camera is Open</Button>}\n\n            </Grid>\n            <Grid item xs={2}/>\n         </Grid>\n      </div>\n   );\n};\n\nexport default CheckCamera;","import React, { useState, useEffect, useRef } from \"react\";\nimport {render} from \"react-dom\";\nimport * as ReactDOM from \"react-dom\";\nimport ScreenIds from \"./ScreenIds\";\nimport {Button, Grid, Paper, TextField} from \"@mui/material\";\nimport { useFilePicker } from 'use-file-picker';\n\nexport default function UploadPresentationLoading(props) {\n\n\n   //const [processingDone, setProcessingDone] = useState(false);\n\n\n   function goToMainMenu() {\n      props.onPresentationLoadingHandler(ScreenIds.MAIN_MENU_SCREEN_ID)\n   }\n\n   function goToPresentationDetails() {\n      console.log(\":(\");\n   }\n\n   /*function setProcessingState(){\n      setProcessingDone(!processingDone);\n   }*/\n\n   // <Button style={{margin: '5%'}} variant=\"contained\" onClick={setProcessingState}>Set Recording Processed\n   //                      (Demo/TB Removed)</Button>\n\n   const processingNotDone =\n      <Grid container spacing={2}>\n            <Grid item xs={2} />\n            <Grid item xs={8}>\n               <h1 style={{color:'whitesmoke'}}>Processing Your Presentation...</h1>\n               <Paper style={{\n                  backgroundColor: 'whitesmoke',\n                  marginTop: '20%',\n                  marginBottom: '5%',\n                  flexDirection: 'row',\n                  alignItems: 'center',\n                  justifyContent: 'center',\n                  paddingTop: '2%',\n               }} elevation={3}>\n                  <p style={{margin: \"2%\"}}> <i> Please wait while your presentation is being processed... </i> </p>\n\n                  <Button style={{margin: '5%'}} variant=\"contained\" onClick={goToMainMenu}>Cancel</Button>\n               </Paper>\n\n            </Grid>\n            <Grid item xs={2}/>\n      </Grid>;\n\n   const processingFinished =\n      <Grid container spacing={2}>\n\n         <Grid item xs={2}/>\n         <Grid item xs={8}>\n            <h1 style={{color:'whitesmoke'}}>Your presentation is processed!</h1>\n            <Paper style={{\n               backgroundColor: 'whitesmoke',\n               marginTop: '20%',\n               marginBottom: '5%',\n               flexDirection: 'row',\n               alignItems: 'center',\n               justifyContent: 'center',\n               paddingTop: '2%',\n            }} elevation={3}>\n               <p style={{margin: \"2%\"}}> You can now find your presentation under the MyPresentations screen. </p>\n\n               <Button style={{margin: '5%'}} variant=\"contained\" onClick={goToMainMenu}>Continue To Main Menu</Button>\n            </Paper>\n\n         </Grid>\n         <Grid item xs={2}/>\n\n      </Grid>;\n\n\n   return (\n      <Grid container spacing={2}>\n         { !props.uploadDone &&\n            processingNotDone\n         }\n         { props.uploadDone &&\n            processingFinished\n         }\n\n      </Grid>\n\n\n\n   );\n}","import React, { useState, useEffect, useRef } from \"react\";\nimport {render} from \"react-dom\";\nimport * as ReactDOM from \"react-dom\";\nimport ScreenIds from \"./ScreenIds\";\n\nimport {Button, Grid, Paper, TextField} from \"@mui/material\";\n\nconst TutorialApp = (props) => {\n\n   function goBackToMainMenu(){\n      props.onTutorialAppHandler(ScreenIds.MAIN_MENU_SCREEN_ID);\n   }\n\n   return (\n      <div>\n         <Grid container spacing={2}>\n            <Grid item xs={12} >\n               <h1 style={{color:'whitesmoke', flexDirection:'row', alignItems:'center', justifyContent:'center', marginTop:\"2%\"}} >\n                  TUTORIAL ON PREXCEL\n               </h1>\n            </Grid>\n            <Grid item xs={2}/>\n            <Grid item xs={8}>\n               <Paper style={{backgroundColor:'whitesmoke', padding:\"2%\", marginTop: '2%', marginBottom:'5%', flexDirection:'row', alignItems:'center', justifyContent:'center'}} elevation={8}>\n                  <h3>How to Use Prexcel</h3>\n                  <p>There are two main use cases within Prexcel, starting a live presentation, and uploading a presentation. When starting a live presentation, follow these steps; \n                  \n                     Go to the \"Start a Presentation\" tab, enter the name of your presentation and the select the option\n                     for starting a live presentation. You will have a chance to calibrate your camera in this screen.\n                     Once you continue to presentation screen, you can start the presentation by the relevant button.\n                     You will see the your face detection and volume on the left, as well as the word recommendations right below them.\n                     Your transcript will also be printed on the screen. You can end the presentation at any time and return to main menu.\n\n                     For uploading a previous presentation, follow these steps;\n\n                     Go to the \"Start a Presentation\" tab,  enter the name of your presentation and the select the option\n                     for uploading a presentation. Your presentation will be processed. You will not be able to move to\n                     any other screen during this time. Once finished, you can see your detailed analysis report from the\n                     My Presentations\" screen.\n                  </p>\n\n                  <h3>How Prexcel Evaluates Presentations</h3>\n                  <p>Your presentation is graded based on 3 criteria. First of these is the face detection score,\n                     which is a measure of how long you kept face contact with the camera. Second is the gap score, which is a \n                     measure of how much big gaps you had in your speech. Final score is the filler words/dragged words score,\n                     which is determined based on how many words you dragged, or repeated during the presentation.\n                  </p>\n\n                  <h3>How Does Live Feedback Work?</h3>\n                  <p>Live feedback functionality is powered by the machine learning algorithms that are embedded in the system. These machine learning systems\n                     analyze the live presentation concurrently and provide instantenous feedback. The feedbacks that Prexcel provides include,\n                     speech volume warnings (whether the decibel of the presenters voice is too high, high, low or too low), face detection warnings (whether \n                     the presenter is facing the camera directly or not), and word recommendations for when the presenter gets stuck during the presentation. \n                  </p>\n               </Paper>\n\n               <Button style={{ marginBottom: '5%'}} variant=\"contained\" onClick={goBackToMainMenu}>Go Back</Button>\n\n            </Grid>\n            <Grid item xs={2}/>\n         </Grid>\n      </div>\n   );\n};\n\nexport default TutorialApp;","import React, { useState, useEffect, useRef } from \"react\";\nimport {render} from \"react-dom\";\nimport * as ReactDOM from \"react-dom\";\nimport ScreenIds from \"./ScreenIds\";\n\nimport {Button, Grid, Paper, TextField} from \"@mui/material\";\n\nconst TutorialPresentation = (props) => {\n\n   function goBackToMainMenu(){\n      props.onTutorialPresentationHandler(ScreenIds.MAIN_MENU_SCREEN_ID);\n   }\n\n   return (\n      <div>\n         <Grid container spacing={2}>\n            <Grid item xs={12} >\n               <h1 style={{color:'whitesmoke', flexDirection:'row', alignItems:'center', justifyContent:'center', marginTop:\"2%\"}} >\n                  TUTORIAL ON GIVING A PRESENTATION\n               </h1>\n            </Grid>\n            <Grid item xs={2}/>\n            <Grid item xs={8}>\n               <Paper style={{backgroundColor:'whitesmoke', padding:\"2%\", marginTop: '2%', marginBottom:'5%', flexDirection:'row', alignItems:'center', justifyContent:'center'}} elevation={8}>\n                  <h3>Important Points About Presentations</h3>\n                     <p>Make sure your presentation has a clear objective.</p>\n                     \n                     <p>Make sure that you have rehearsed your presentation enough times.</p>\n                     \n                     <p>Make sure that you do not add walls of text to your presentation slides.</p>\n\n                  <br/>\n\n                  <h3>Look To The Camera!</h3>\n                  <p>Make sure to keep eye contact with your audience at all times. Since, nowadays the presentations have shifted\n                     to an online space; altough it is unintuitive to most, one must keep their face rotated towards the camera.\n                  </p>\n\n                  <br/>\n                  \n                  <h3>How to Speak Effectively?</h3>\n                  <p>When presenting in online presentations, usually the presenters wear headphones, and when one does not \n                     hear themselves talk; it is harder to adjust the volume of the voice and the speed of the speech. However,\n                     with practise and the feedback given from Prexcel, improving oneself is easy.\n                  </p>\n               </Paper>\n\n               <Button data-testid=\"tutorial_presentation_cancel_button_id\" style={{ marginBottom: '5%'}} variant=\"contained\" onClick={goBackToMainMenu}>Go Back</Button>\n\n            </Grid>\n            <Grid item xs={2}/>\n         </Grid>\n      </div>\n   );\n};\n\nexport default TutorialPresentation;","// todo remove\nimport logo from './logo.svg';\n\n\nimport {\n   HashRouter as Router,\n   Route,\n   Routes,\n   Link,\n   Redirect,\n   // withRouter\n} from \"react-router-dom\";\n\nimport React, {useState} from \"react\";\nimport './App.css';\nimport Login from \"./pages/Login\";\nimport MainMenu from \"./pages/MainMenu\";\nimport MyPresentations from \"./pages/MyPresentations\";\nimport PresentationDetails from \"./pages/PresentationDetails\";\nimport TranscriptDetails from \"./pages/TranscriptDetails\";\nimport SignUp from \"./pages/SignUp\";\nimport LivePresentation from \"./pages/LivePresentation\";\nimport ChatBot from \"./pages/ChatBot\";\n\nimport ScreenIds from \"./pages/ScreenIds\";\nimport UserAccountDetails from \"./pages/UserAccountDetails\";\nimport NewPresentation from \"./pages/NewPresentation\";\nimport UploadRecordingScreen from \"./pages/UploadRecordingScreen\";\nimport ProgressTracking from \"./pages/ProgressTracking\";\nimport CheckCamera from \"./pages/CheckCamera\";\nimport UploadPresentationLoading from \"./pages/UploadPresentationLoading\";\nimport TutorialApp from \"./pages/TutorialApp\";\nimport TutorialPresentation from \"./pages/TutorialPresentation\";\n\nfunction App() {\n\n   const [processedTranscriptArr, setTranscriptArr] = useState([]);\n\n   const [currentScreen, setCurrentScreen] = useState(ScreenIds.LOGIN_SCREEN_ID);\n   const [currentUserID, setCurrentUserID] = useState(0);\n\n   const [selectedPresentations, setSelectedPresentations] = useState([]);\n   const [newPresentationName, setNewPresentationName] = useState(\"\");\n\n   const [uploadDone, setUploadDone] = useState(false);\n\n   function uploadHandler(uploadDone) {\n      setUploadDone(uploadDone);\n   }\n\n   function processTranscriptHandler (transcript) {\n      setTranscriptArr(transcript);\n   }\n\n   function changeViewHandler(newScreenId) {\n      setCurrentScreen(newScreenId);\n   }\n\n   function userIdHandler(newUserId) {\n      setCurrentUserID(newUserId);\n   }\n\n   function presentationSelectionHandler(presentations) {\n      setSelectedPresentations(presentations);\n   }\n\n   function newPresentationNameHandler(newPresentationName) {\n      setNewPresentationName(newPresentationName);\n   }\n\n   const UIViewController = () => {\n      if (currentScreen === ScreenIds.LOGIN_SCREEN_ID)\n         return <Login onUserIdHandler={userIdHandler} onLoginHandler={changeViewHandler}/>;\n      else if (currentScreen === ScreenIds.MAIN_MENU_SCREEN_ID)\n         return <MainMenu onMainMenuHandler={changeViewHandler}/>;\n      else if (currentScreen === ScreenIds.MY_PRESENTATIONS_SCREEN_ID)\n         return <MyPresentations currentUserID={currentUserID} onPresentationSelection={presentationSelectionHandler} onMyPresentationsHandler={changeViewHandler}/>;\n      else if (currentScreen === ScreenIds.LIVE_PRESENTATION_FEEDBACK_SCREEN_ID)\n         return <LivePresentation newPresentationName={newPresentationName} currentUserID={currentUserID} onLivePresentationHandler={changeViewHandler}/>;\n      else if (currentScreen === ScreenIds.PRESENTATION_DETAILS_SCREEN_ID)\n         return <PresentationDetails processTranscriptHandler={processTranscriptHandler} selectedPresentations={selectedPresentations} onPresentationDetails={changeViewHandler}/>;\n      else if (currentScreen === ScreenIds.TRANSCRIPT_DETAILS_SCREEN_ID)\n         return <TranscriptDetails processedTranscriptArr={processedTranscriptArr} selectedPresentations={selectedPresentations} onTranscriptDetails={changeViewHandler}/>;\n      else if (currentScreen === ScreenIds.SIGNUP_SCREEN_ID)\n         return <SignUp onSignUpHandler={changeViewHandler}/>\n      else if (currentScreen === ScreenIds.CHAT_BOT_SCREEN_ID)\n         return <ChatBot onChatBot={changeViewHandler}/>;\n      else if (currentScreen === ScreenIds.USER_ACC_DETAILS_SCREEN_ID)\n         return <UserAccountDetails onUserAccountDetailsHandler={changeViewHandler}/>;\n      else if (currentScreen === ScreenIds.NEW_PRESENTATION_ID)\n         return <NewPresentation onNewPresentationName={newPresentationNameHandler} onNewPresentationHandler={changeViewHandler}/>;\n      else if (currentScreen === ScreenIds.UPLOAD_PRESENTATION_SCREEN_ID)\n         return <UploadRecordingScreen uploadHandler={uploadHandler} newPresentationName={newPresentationName} onUploadPresentationHandler={changeViewHandler}/>;\n      else if (currentScreen === ScreenIds.PROGRESS_TRACKING_SCREEN_ID)\n         return <ProgressTracking selectedPresentations={selectedPresentations} onProgressTracking={changeViewHandler}/>;\n      else if (currentScreen === ScreenIds.CHECK_CAMERA)\n         return <CheckCamera onCheckCameraHandler={changeViewHandler} />;\n      else if (currentScreen === ScreenIds.LOADING_SCREEN)\n         return <UploadPresentationLoading uploadDone={uploadDone} onPresentationLoadingHandler={changeViewHandler} />;\n      else if (currentScreen === ScreenIds.TUTORIAL_APP_SCREEN_ID)\n         return <TutorialApp onTutorialAppHandler={changeViewHandler} />;\n      else if (currentScreen === ScreenIds.TUTORIAL_PRESENTATION_SCREEN_ID)\n          return <TutorialPresentation onTutorialPresentationHandler={changeViewHandler} />;\n   }\n\n\n   return(\n      <div className=\"App\" style={{backgroundColor:\"#2C3E50\", minHeight: \"102vh\" }}>\n         {UIViewController()}\n      </div>\n   );\n\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Login from './pages/Login'\nimport reportWebVitals from './reportWebVitals';\n\nimport {\n    HashRouter as Router,\n    Route,\n    Switch,\n    Link,\n    Redirect,\n    withRouter\n} from \"react-router-dom\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n        <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}